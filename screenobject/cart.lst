------- FILE screenobject.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE screenobject.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE screenobject.asm
      5  10000 ????
      6  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  10000 ????						;; Start an unitialized segment at $80 for RAM variable
      8  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9 U0082 ????				      seg.u	variable
     10 U0080					      org	$80
     11 U0080		       00	   P0Height   ds	1	; defines one byte for player 0 height
     12 U0081		       00	   P1Height   ds	1	; defines one byte for player 1 height
     13 U0082
     14 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     15 U0082							;; Start our ROM code
     16 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     17  10000 ????				       seg
     18  f000					      org	$f000
     19  f000
     20  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     22  f00b
     23  f00b		       a2 09		      ldx	#$09
     24  f00d		       86 09		      stx	COLUBK
     25  f00f
     26  f00f		       a9 44		      lda	#$44
     27  f011		       85 08		      sta	COLUPF
     28  f013
     29  f013		       a9 0a		      lda	#10
     30  f015		       85 80		      sta	P0Height
     31  f017		       85 81		      sta	P1Height
     32  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f019							;; Start a new frame by configuring VBLANK and VSYNC
     34  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f019				   StartFrame
     36  f019		       a9 02		      lda	#$2
     37  f01b		       85 01		      sta	VBLANK
     38  f01d		       85 00		      sta	VSYNC
     39  f01f
     40  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     41  f01f							;; Generate the three line of VSYNC
     42  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f01f					      REPEAT	3
     44  f01f		       85 02		      sta	WSYNC
     43  f01f					      REPEND
     44  f021		       85 02		      sta	WSYNC
     43  f021					      REPEND
     44  f023		       85 02		      sta	WSYNC
     45  f025					      REPEND
     46  f025		       a9 00		      lda	#0
     47  f027		       85 00		      sta	VSYNC
     48  f029
     49  f029							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  f029							;; Let the TIA output the 37 recommended line of VBLANK
     51  f029							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f029					      REPEAT	37
     53  f029		       85 02		      sta	WSYNC
     52  f029					      REPEND
     53  f02b		       85 02		      sta	WSYNC
     52  f02b					      REPEND
     53  f02d		       85 02		      sta	WSYNC
     52  f02d					      REPEND
     53  f02f		       85 02		      sta	WSYNC
     52  f02f					      REPEND
     53  f031		       85 02		      sta	WSYNC
     52  f031					      REPEND
     53  f033		       85 02		      sta	WSYNC
     52  f033					      REPEND
     53  f035		       85 02		      sta	WSYNC
     52  f035					      REPEND
     53  f037		       85 02		      sta	WSYNC
     52  f037					      REPEND
     53  f039		       85 02		      sta	WSYNC
     52  f039					      REPEND
     53  f03b		       85 02		      sta	WSYNC
     52  f03b					      REPEND
     53  f03d		       85 02		      sta	WSYNC
     52  f03d					      REPEND
     53  f03f		       85 02		      sta	WSYNC
     52  f03f					      REPEND
     53  f041		       85 02		      sta	WSYNC
     52  f041					      REPEND
     53  f043		       85 02		      sta	WSYNC
     52  f043					      REPEND
     53  f045		       85 02		      sta	WSYNC
     52  f045					      REPEND
     53  f047		       85 02		      sta	WSYNC
     52  f047					      REPEND
     53  f049		       85 02		      sta	WSYNC
     52  f049					      REPEND
     53  f04b		       85 02		      sta	WSYNC
     52  f04b					      REPEND
     53  f04d		       85 02		      sta	WSYNC
     52  f04d					      REPEND
     53  f04f		       85 02		      sta	WSYNC
     52  f04f					      REPEND
     53  f051		       85 02		      sta	WSYNC
     52  f051					      REPEND
     53  f053		       85 02		      sta	WSYNC
     52  f053					      REPEND
     53  f055		       85 02		      sta	WSYNC
     52  f055					      REPEND
     53  f057		       85 02		      sta	WSYNC
     52  f057					      REPEND
     53  f059		       85 02		      sta	WSYNC
     52  f059					      REPEND
     53  f05b		       85 02		      sta	WSYNC
     52  f05b					      REPEND
     53  f05d		       85 02		      sta	WSYNC
     52  f05d					      REPEND
     53  f05f		       85 02		      sta	WSYNC
     52  f05f					      REPEND
     53  f061		       85 02		      sta	WSYNC
     52  f061					      REPEND
     53  f063		       85 02		      sta	WSYNC
     52  f063					      REPEND
     53  f065		       85 02		      sta	WSYNC
     52  f065					      REPEND
     53  f067		       85 02		      sta	WSYNC
     52  f067					      REPEND
     53  f069		       85 02		      sta	WSYNC
     52  f069					      REPEND
     53  f06b		       85 02		      sta	WSYNC
     52  f06b					      REPEND
     53  f06d		       85 02		      sta	WSYNC
     52  f06d					      REPEND
     53  f06f		       85 02		      sta	WSYNC
     52  f06f					      REPEND
     53  f071		       85 02		      sta	WSYNC
     54  f073					      REPEND
     55  f073		       a9 00		      lda	#0
     56  f075		       85 01		      sta	VBLANK
     57  f077
     58  f077							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f077							;; Set the CTRLPF register to allow playfield reflection
     60  f077							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f077		       a2 00		      ldx	#%00000000
     62  f079		       86 0a		      stx	CTRLPF
     63  f07b
     64  f07b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     65  f07b							;; Set color players
     66  f07b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67  f07b		       a9 57		      lda	#$57
     68  f07d		       85 06		      sta	COLUP0
     69  f07f
     70  f07f		       a9 bb		      lda	#$BB
     71  f081		       85 07		      sta	COLUP1
     72  f083
     73  f083		       a9 02		      lda	#%00000010
     74  f085		       85 0a		      sta	CTRLPF
     75  f087
     76  f087							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     77  f087							;; Draw 192 visible scanlines
     78  f087							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79  f087
     80  f087							; Init 10 line with nothing
     81  f087				   VisibleScanlines
     82  f087					      REPEAT	10
     83  f087		       85 02		      sta	WSYNC
     82  f087					      REPEND
     83  f089		       85 02		      sta	WSYNC
     82  f089					      REPEND
     83  f08b		       85 02		      sta	WSYNC
     82  f08b					      REPEND
     83  f08d		       85 02		      sta	WSYNC
     82  f08d					      REPEND
     83  f08f		       85 02		      sta	WSYNC
     82  f08f					      REPEND
     83  f091		       85 02		      sta	WSYNC
     82  f091					      REPEND
     83  f093		       85 02		      sta	WSYNC
     82  f093					      REPEND
     83  f095		       85 02		      sta	WSYNC
     82  f095					      REPEND
     83  f097		       85 02		      sta	WSYNC
     82  f097					      REPEND
     83  f099		       85 02		      sta	WSYNC
     84  f09b					      REPEND
     85  f09b
     86  f09b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87  f09b							;; Display 10 line for the scorboard using an array of bytes
     88  f09b							;; defined at NumberBitMap
     89  f09b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     90  f09b		       a0 00		      ldy	#0
     91  f09d				   ScoreBoardLoop
     92  f09d		       b9 f2 ff 	      lda	NumberBitMap,Y
     93  f0a0		       85 0e		      sta	PF1
     94  f0a2		       85 02		      sta	WSYNC
     95  f0a4		       c8		      iny
     96  f0a5		       c0 0a		      cpy	#10
     97  f0a7		       d0 f4		      bne	ScoreBoardLoop
     98  f0a9
     99  f0a9		       a9 00		      lda	#0
    100  f0ab		       85 0e		      sta	PF1
    101  f0ad
    102  f0ad
    103  f0ad							; Droaw 50 line with nothing
    104  f0ad					      REPEAT	50
    105  f0ad		       85 02		      sta	WSYNC
    104  f0ad					      REPEND
    105  f0af		       85 02		      sta	WSYNC
    104  f0af					      REPEND
    105  f0b1		       85 02		      sta	WSYNC
    104  f0b1					      REPEND
    105  f0b3		       85 02		      sta	WSYNC
    104  f0b3					      REPEND
    105  f0b5		       85 02		      sta	WSYNC
    104  f0b5					      REPEND
    105  f0b7		       85 02		      sta	WSYNC
    104  f0b7					      REPEND
    105  f0b9		       85 02		      sta	WSYNC
    104  f0b9					      REPEND
    105  f0bb		       85 02		      sta	WSYNC
    104  f0bb					      REPEND
    105  f0bd		       85 02		      sta	WSYNC
    104  f0bd					      REPEND
    105  f0bf		       85 02		      sta	WSYNC
    104  f0bf					      REPEND
    105  f0c1		       85 02		      sta	WSYNC
    104  f0c1					      REPEND
    105  f0c3		       85 02		      sta	WSYNC
    104  f0c3					      REPEND
    105  f0c5		       85 02		      sta	WSYNC
    104  f0c5					      REPEND
    105  f0c7		       85 02		      sta	WSYNC
    104  f0c7					      REPEND
    105  f0c9		       85 02		      sta	WSYNC
    104  f0c9					      REPEND
    105  f0cb		       85 02		      sta	WSYNC
    104  f0cb					      REPEND
    105  f0cd		       85 02		      sta	WSYNC
    104  f0cd					      REPEND
    105  f0cf		       85 02		      sta	WSYNC
    104  f0cf					      REPEND
    105  f0d1		       85 02		      sta	WSYNC
    104  f0d1					      REPEND
    105  f0d3		       85 02		      sta	WSYNC
    104  f0d3					      REPEND
    105  f0d5		       85 02		      sta	WSYNC
    104  f0d5					      REPEND
    105  f0d7		       85 02		      sta	WSYNC
    104  f0d7					      REPEND
    105  f0d9		       85 02		      sta	WSYNC
    104  f0d9					      REPEND
    105  f0db		       85 02		      sta	WSYNC
    104  f0db					      REPEND
    105  f0dd		       85 02		      sta	WSYNC
    104  f0dd					      REPEND
    105  f0df		       85 02		      sta	WSYNC
    104  f0df					      REPEND
    105  f0e1		       85 02		      sta	WSYNC
    104  f0e1					      REPEND
    105  f0e3		       85 02		      sta	WSYNC
    104  f0e3					      REPEND
    105  f0e5		       85 02		      sta	WSYNC
    104  f0e5					      REPEND
    105  f0e7		       85 02		      sta	WSYNC
    104  f0e7					      REPEND
    105  f0e9		       85 02		      sta	WSYNC
    104  f0e9					      REPEND
    105  f0eb		       85 02		      sta	WSYNC
    104  f0eb					      REPEND
    105  f0ed		       85 02		      sta	WSYNC
    104  f0ed					      REPEND
    105  f0ef		       85 02		      sta	WSYNC
    104  f0ef					      REPEND
    105  f0f1		       85 02		      sta	WSYNC
    104  f0f1					      REPEND
    105  f0f3		       85 02		      sta	WSYNC
    104  f0f3					      REPEND
    105  f0f5		       85 02		      sta	WSYNC
    104  f0f5					      REPEND
    105  f0f7		       85 02		      sta	WSYNC
    104  f0f7					      REPEND
    105  f0f9		       85 02		      sta	WSYNC
    104  f0f9					      REPEND
    105  f0fb		       85 02		      sta	WSYNC
    104  f0fb					      REPEND
    105  f0fd		       85 02		      sta	WSYNC
    104  f0fd					      REPEND
    105  f0ff		       85 02		      sta	WSYNC
    104  f0ff					      REPEND
    105  f101		       85 02		      sta	WSYNC
    104  f101					      REPEND
    105  f103		       85 02		      sta	WSYNC
    104  f103					      REPEND
    105  f105		       85 02		      sta	WSYNC
    104  f105					      REPEND
    105  f107		       85 02		      sta	WSYNC
    104  f107					      REPEND
    105  f109		       85 02		      sta	WSYNC
    104  f109					      REPEND
    105  f10b		       85 02		      sta	WSYNC
    104  f10b					      REPEND
    105  f10d		       85 02		      sta	WSYNC
    104  f10d					      REPEND
    105  f10f		       85 02		      sta	WSYNC
    106  f111					      REPEND
    107  f111
    108  f111							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f111							;; Display 10 line for the player 0 using an array of bytes
    110  f111							;; defined at PlayerBitMap
    111  f111							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f111		       a0 00		      ldy	#0
    113  f113				   Player0Loop
    114  f113		       b9 e8 ff 	      lda	PlayerBitMap,Y
    115  f116		       85 1b		      sta	GRP0
    116  f118		       85 02		      sta	WSYNC
    117  f11a		       c8		      iny
    118  f11b		       c4 80		      cpy	P0Height
    119  f11d		       d0 f4		      bne	Player0Loop
    120  f11f
    121  f11f		       a9 00		      lda	#0
    122  f121		       85 1b		      sta	GRP0
    123  f123
    124  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    125  f123							;; Display 10 line for the player 1 using an array of bytes
    126  f123							;; defined at PlayerBitMap
    127  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f123		       a0 00		      ldy	#0
    129  f125				   Player1Loop
    130  f125		       b9 e8 ff 	      lda	PlayerBitMap,Y
    131  f128		       85 1c		      sta	GRP1
    132  f12a		       85 02		      sta	WSYNC
    133  f12c		       c8		      iny
    134  f12d		       c4 81		      cpy	P1Height
    135  f12f		       d0 f4		      bne	Player1Loop
    136  f131
    137  f131		       a9 00		      lda	#0
    138  f133		       85 1c		      sta	GRP1
    139  f135
    140  f135
    141  f135
    142  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    143  f135							;; Draw the reste of the scanline (192 - 90)
    144  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  f135					      REPEAT	102
    146  f135		       85 02		      sta	WSYNC
    145  f135					      REPEND
    146  f137		       85 02		      sta	WSYNC
    145  f137					      REPEND
    146  f139		       85 02		      sta	WSYNC
    145  f139					      REPEND
    146  f13b		       85 02		      sta	WSYNC
    145  f13b					      REPEND
    146  f13d		       85 02		      sta	WSYNC
    145  f13d					      REPEND
    146  f13f		       85 02		      sta	WSYNC
    145  f13f					      REPEND
    146  f141		       85 02		      sta	WSYNC
    145  f141					      REPEND
    146  f143		       85 02		      sta	WSYNC
    145  f143					      REPEND
    146  f145		       85 02		      sta	WSYNC
    145  f145					      REPEND
    146  f147		       85 02		      sta	WSYNC
    145  f147					      REPEND
    146  f149		       85 02		      sta	WSYNC
    145  f149					      REPEND
    146  f14b		       85 02		      sta	WSYNC
    145  f14b					      REPEND
    146  f14d		       85 02		      sta	WSYNC
    145  f14d					      REPEND
    146  f14f		       85 02		      sta	WSYNC
    145  f14f					      REPEND
    146  f151		       85 02		      sta	WSYNC
    145  f151					      REPEND
    146  f153		       85 02		      sta	WSYNC
    145  f153					      REPEND
    146  f155		       85 02		      sta	WSYNC
    145  f155					      REPEND
    146  f157		       85 02		      sta	WSYNC
    145  f157					      REPEND
    146  f159		       85 02		      sta	WSYNC
    145  f159					      REPEND
    146  f15b		       85 02		      sta	WSYNC
    145  f15b					      REPEND
    146  f15d		       85 02		      sta	WSYNC
    145  f15d					      REPEND
    146  f15f		       85 02		      sta	WSYNC
    145  f15f					      REPEND
    146  f161		       85 02		      sta	WSYNC
    145  f161					      REPEND
    146  f163		       85 02		      sta	WSYNC
    145  f163					      REPEND
    146  f165		       85 02		      sta	WSYNC
    145  f165					      REPEND
    146  f167		       85 02		      sta	WSYNC
    145  f167					      REPEND
    146  f169		       85 02		      sta	WSYNC
    145  f169					      REPEND
    146  f16b		       85 02		      sta	WSYNC
    145  f16b					      REPEND
    146  f16d		       85 02		      sta	WSYNC
    145  f16d					      REPEND
    146  f16f		       85 02		      sta	WSYNC
    145  f16f					      REPEND
    146  f171		       85 02		      sta	WSYNC
    145  f171					      REPEND
    146  f173		       85 02		      sta	WSYNC
    145  f173					      REPEND
    146  f175		       85 02		      sta	WSYNC
    145  f175					      REPEND
    146  f177		       85 02		      sta	WSYNC
    145  f177					      REPEND
    146  f179		       85 02		      sta	WSYNC
    145  f179					      REPEND
    146  f17b		       85 02		      sta	WSYNC
    145  f17b					      REPEND
    146  f17d		       85 02		      sta	WSYNC
    145  f17d					      REPEND
    146  f17f		       85 02		      sta	WSYNC
    145  f17f					      REPEND
    146  f181		       85 02		      sta	WSYNC
    145  f181					      REPEND
    146  f183		       85 02		      sta	WSYNC
    145  f183					      REPEND
    146  f185		       85 02		      sta	WSYNC
    145  f185					      REPEND
    146  f187		       85 02		      sta	WSYNC
    145  f187					      REPEND
    146  f189		       85 02		      sta	WSYNC
    145  f189					      REPEND
    146  f18b		       85 02		      sta	WSYNC
    145  f18b					      REPEND
    146  f18d		       85 02		      sta	WSYNC
    145  f18d					      REPEND
    146  f18f		       85 02		      sta	WSYNC
    145  f18f					      REPEND
    146  f191		       85 02		      sta	WSYNC
    145  f191					      REPEND
    146  f193		       85 02		      sta	WSYNC
    145  f193					      REPEND
    146  f195		       85 02		      sta	WSYNC
    145  f195					      REPEND
    146  f197		       85 02		      sta	WSYNC
    145  f197					      REPEND
    146  f199		       85 02		      sta	WSYNC
    145  f199					      REPEND
    146  f19b		       85 02		      sta	WSYNC
    145  f19b					      REPEND
    146  f19d		       85 02		      sta	WSYNC
    145  f19d					      REPEND
    146  f19f		       85 02		      sta	WSYNC
    145  f19f					      REPEND
    146  f1a1		       85 02		      sta	WSYNC
    145  f1a1					      REPEND
    146  f1a3		       85 02		      sta	WSYNC
    145  f1a3					      REPEND
    146  f1a5		       85 02		      sta	WSYNC
    145  f1a5					      REPEND
    146  f1a7		       85 02		      sta	WSYNC
    145  f1a7					      REPEND
    146  f1a9		       85 02		      sta	WSYNC
    145  f1a9					      REPEND
    146  f1ab		       85 02		      sta	WSYNC
    145  f1ab					      REPEND
    146  f1ad		       85 02		      sta	WSYNC
    145  f1ad					      REPEND
    146  f1af		       85 02		      sta	WSYNC
    145  f1af					      REPEND
    146  f1b1		       85 02		      sta	WSYNC
    145  f1b1					      REPEND
    146  f1b3		       85 02		      sta	WSYNC
    145  f1b3					      REPEND
    146  f1b5		       85 02		      sta	WSYNC
    145  f1b5					      REPEND
    146  f1b7		       85 02		      sta	WSYNC
    145  f1b7					      REPEND
    146  f1b9		       85 02		      sta	WSYNC
    145  f1b9					      REPEND
    146  f1bb		       85 02		      sta	WSYNC
    145  f1bb					      REPEND
    146  f1bd		       85 02		      sta	WSYNC
    145  f1bd					      REPEND
    146  f1bf		       85 02		      sta	WSYNC
    145  f1bf					      REPEND
    146  f1c1		       85 02		      sta	WSYNC
    145  f1c1					      REPEND
    146  f1c3		       85 02		      sta	WSYNC
    145  f1c3					      REPEND
    146  f1c5		       85 02		      sta	WSYNC
    145  f1c5					      REPEND
    146  f1c7		       85 02		      sta	WSYNC
    145  f1c7					      REPEND
    146  f1c9		       85 02		      sta	WSYNC
    145  f1c9					      REPEND
    146  f1cb		       85 02		      sta	WSYNC
    145  f1cb					      REPEND
    146  f1cd		       85 02		      sta	WSYNC
    145  f1cd					      REPEND
    146  f1cf		       85 02		      sta	WSYNC
    145  f1cf					      REPEND
    146  f1d1		       85 02		      sta	WSYNC
    145  f1d1					      REPEND
    146  f1d3		       85 02		      sta	WSYNC
    145  f1d3					      REPEND
    146  f1d5		       85 02		      sta	WSYNC
    145  f1d5					      REPEND
    146  f1d7		       85 02		      sta	WSYNC
    145  f1d7					      REPEND
    146  f1d9		       85 02		      sta	WSYNC
    145  f1d9					      REPEND
    146  f1db		       85 02		      sta	WSYNC
    145  f1db					      REPEND
    146  f1dd		       85 02		      sta	WSYNC
    145  f1dd					      REPEND
    146  f1df		       85 02		      sta	WSYNC
    145  f1df					      REPEND
    146  f1e1		       85 02		      sta	WSYNC
    145  f1e1					      REPEND
    146  f1e3		       85 02		      sta	WSYNC
    145  f1e3					      REPEND
    146  f1e5		       85 02		      sta	WSYNC
    145  f1e5					      REPEND
    146  f1e7		       85 02		      sta	WSYNC
    145  f1e7					      REPEND
    146  f1e9		       85 02		      sta	WSYNC
    145  f1e9					      REPEND
    146  f1eb		       85 02		      sta	WSYNC
    145  f1eb					      REPEND
    146  f1ed		       85 02		      sta	WSYNC
    145  f1ed					      REPEND
    146  f1ef		       85 02		      sta	WSYNC
    145  f1ef					      REPEND
    146  f1f1		       85 02		      sta	WSYNC
    145  f1f1					      REPEND
    146  f1f3		       85 02		      sta	WSYNC
    145  f1f3					      REPEND
    146  f1f5		       85 02		      sta	WSYNC
    145  f1f5					      REPEND
    146  f1f7		       85 02		      sta	WSYNC
    145  f1f7					      REPEND
    146  f1f9		       85 02		      sta	WSYNC
    145  f1f9					      REPEND
    146  f1fb		       85 02		      sta	WSYNC
    145  f1fb					      REPEND
    146  f1fd		       85 02		      sta	WSYNC
    145  f1fd					      REPEND
    146  f1ff		       85 02		      sta	WSYNC
    147  f201					      REPEND
    148  f201
    149  f201
    150  f201							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    151  f201							;; Output 30 more VBLANK overscan lines to complete our frame
    152  f201							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    153  f201		       a9 02		      lda	#2
    154  f203		       85 01		      sta	VBLANK
    155  f205					      REPEAT	30
    156  f205		       85 02		      sta	WSYNC
    155  f205					      REPEND
    156  f207		       85 02		      sta	WSYNC
    155  f207					      REPEND
    156  f209		       85 02		      sta	WSYNC
    155  f209					      REPEND
    156  f20b		       85 02		      sta	WSYNC
    155  f20b					      REPEND
    156  f20d		       85 02		      sta	WSYNC
    155  f20d					      REPEND
    156  f20f		       85 02		      sta	WSYNC
    155  f20f					      REPEND
    156  f211		       85 02		      sta	WSYNC
    155  f211					      REPEND
    156  f213		       85 02		      sta	WSYNC
    155  f213					      REPEND
    156  f215		       85 02		      sta	WSYNC
    155  f215					      REPEND
    156  f217		       85 02		      sta	WSYNC
    155  f217					      REPEND
    156  f219		       85 02		      sta	WSYNC
    155  f219					      REPEND
    156  f21b		       85 02		      sta	WSYNC
    155  f21b					      REPEND
    156  f21d		       85 02		      sta	WSYNC
    155  f21d					      REPEND
    156  f21f		       85 02		      sta	WSYNC
    155  f21f					      REPEND
    156  f221		       85 02		      sta	WSYNC
    155  f221					      REPEND
    156  f223		       85 02		      sta	WSYNC
    155  f223					      REPEND
    156  f225		       85 02		      sta	WSYNC
    155  f225					      REPEND
    156  f227		       85 02		      sta	WSYNC
    155  f227					      REPEND
    156  f229		       85 02		      sta	WSYNC
    155  f229					      REPEND
    156  f22b		       85 02		      sta	WSYNC
    155  f22b					      REPEND
    156  f22d		       85 02		      sta	WSYNC
    155  f22d					      REPEND
    156  f22f		       85 02		      sta	WSYNC
    155  f22f					      REPEND
    156  f231		       85 02		      sta	WSYNC
    155  f231					      REPEND
    156  f233		       85 02		      sta	WSYNC
    155  f233					      REPEND
    156  f235		       85 02		      sta	WSYNC
    155  f235					      REPEND
    156  f237		       85 02		      sta	WSYNC
    155  f237					      REPEND
    156  f239		       85 02		      sta	WSYNC
    155  f239					      REPEND
    156  f23b		       85 02		      sta	WSYNC
    155  f23b					      REPEND
    156  f23d		       85 02		      sta	WSYNC
    155  f23d					      REPEND
    156  f23f		       85 02		      sta	WSYNC
    157  f241					      REPEND
    158  f241		       a9 00		      lda	#0
    159  f243		       85 01		      sta	VBLANK
    160  f245
    161  f245							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    162  f245							;; Loop to next frame
    163  f245							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    164  f245
    165  f245		       4c 19 f0 	      jmp	StartFrame
    166  f248
    167  f248							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    168  f248							;; Player
    169  f248							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    170  ffe8					      org	$ffe8
    171  ffe8				   PlayerBitMap
    172  ffe8		       7e		      .byte.b	#%01111110	;  ######
    173  ffe9		       ff		      .byte.b	#%11111111	; ########
    174  ffea		       99		      .byte.b	#%10011001	; #  ##  #
    175  ffeb		       ff		      .byte.b	#%11111111	; ########
    176  ffec		       e7		      .byte.b	#%11100111	; ###	###
    177  ffed		       ff		      .byte.b	#%11111111	; ########
    178  ffee		       bd		      .byte.b	#%10111101	; # #### #
    179  ffef		       c3		      .byte.b	#%11000011	; ##	 ##
    180  fff0		       c3		      .byte.b	#%11000011	; ########
    181  fff1		       7e		      .byte.b	#%01111110	;  ######
    182  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    183  fff2							;; Score
    184  fff2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    185  fff2					      org	$fff2
    186  fff2				   NumberBitMap
    187  fff2		       0e		      .byte.b	#%00001110	; ########
    188  fff3		       0e		      .byte.b	#%00001110	; ########
    189  fff4		       02		      .byte.b	#%00000010	;	###
    190  fff5		       02		      .byte.b	#%00000010	;	###
    191  fff6		       0e		      .byte.b	#%00001110	; ########
    192  fff7		       0e		      .byte.b	#%00001110	; ########
    193  fff8		       08		      .byte.b	#%00001000	; ###
    194  fff9		       08		      .byte.b	#%00001000	; ###
    195  fffa		       0e		      .byte.b	#%00001110	; ########
    196  fffb		       0e		      .byte.b	#%00001110	; ########
    197  fffc
    198  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    199  fffc							;; Complete ROM size with exactly 4kB
    200  fffc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  fffc
    202  fffc					      org	$fffc
    203  fffc		       00 f0		      .word.w	Reset	; reset vector
    204  fffe		       00 f0		      .word.w	Reset	; BRK vector
